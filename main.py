import asyncio
import logging
import aiohttp
from urllib.parse import urlparse, urlunparse
from typing import Dict, Any
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

log = logging.getLogger("gamestatus")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

async def get_server_status(addr: str) -> Dict[str, Any]:
    async with aiohttp.ClientSession() as session:
        async with session.get(addr + "/status") as resp:
            resp.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞
            return await resp.json()

def get_ss14_status_url(url: str) -> str:
    if "//" not in url:
        url = "//" + url

    parsed = urlparse(url, "ss14", allow_fragments=False)
    port = parsed.port or (443 if parsed.scheme == "ss14s" else 1212)
    scheme = "https" if parsed.scheme == "ss14s" else "http"

    return urlunparse((scheme, f"{parsed.hostname}:{port}", parsed.path, parsed.params, parsed.query, parsed.fragment))

async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    addr = context.args[0] if context.args else None
    if not addr:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message.
    message = await update.message.reply_text("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

    previous_text = ""
    
    while True:
        try:
            server_url = get_ss14_status_url(addr)
            json_data = await get_server_status(server_url)

            players_count = json_data.get("players", "?")
            max_players = json_data.get("soft_max_players", "?")
            round_id = json_data.get("round_id", "?")
            gamemap = json_data.get("map", "?")
            preset = json_data.get("preset", "?")

            rlevel = json_data.get("run_level", -1)
            status = "Unknown"
            if rlevel == 0:
                status = "–í –ª–æ–±–±–∏"
            elif rlevel == 1:
                status = "–í –∏–≥—Ä–µ"
            elif rlevel == 2:
                status = "–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã"

            response_text = (
                f"üöÄ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {status}\n"
                f"üë• –ö–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {players_count}/{max_players}\n"
                f"üí° ID —Ä–∞—É–Ω–¥–∞: {round_id}\n"
                f"üó∫ –ö–∞—Ä—Ç–∞: {gamemap}\n"
                f"üì¶ –ü—Ä–µ—Å–µ—Ç: {preset}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if response_text != previous_text:
                await message.edit_text(response_text, parse_mode="Markdown")
                previous_text = response_text

            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

        except aiohttp.ClientError as e:
            log.exception("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: %s", str(e))
            await message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.", parse_mode="Markdown")
            break
        except Exception as e:
            log.exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %s", str(e))
            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", parse_mode="Markdown")
            break
        finally:
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status <–∞–¥—Ä–µ—Å> —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞.")

def main() -> None:
    # –ó–∞–º–µ–Ω–∏—Ç–µ '–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = ApplicationBuilder().token('7074181875:AAHlhY510AC9-fXZw3_Pd4SD-ko1oY1LR3o').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", update_status))

    application.run_polling()

if __name__ == '__main__':
    main()
